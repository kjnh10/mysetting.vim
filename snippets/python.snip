snippet     map
abbr        map(int,input().split())
alias       input_as_separeted
    map(${1:int}, input().split())

snippet     list
abbr        list(map(int,input().split()))
alias       input_as_list
    list(map(${1:int}, input().split()))

snippet     input
abbr        list(map(int,input().split()))
alias       input_as_list
    [list(map(${1:int}, input().split())) for n in range(N)]

snippet     b_search
abbr        [func]binary_search aliased as bs
alias       bs
options     indent
	def binary_search_for_integer(ng, ok):
	    """ return the number that is OK firstly """
		while math.fabs(ok-ng) > 1:
			mid = (ok+ng)//2
			if solve(mid):
				ok = mid
			else:
				ng = mid
		return ok

	def solve(x):
		pass
		# return True
		# return False


snippet     import standard library
abbr        import standard library [im]
alias       im
options     indent
    import re
    from scipy import integrate
    from operator import itemgetter
    from collections import defaultdict as dd
    from collections import Counter
    from collections import deque
    import numpy as np
    import fractions
    import itertools
    import heapq
    from copy import deepcopy as dcopy
    from heapq import heappop, heappush, heapify
    import math

snippet     3D
abbr        3D
alias       aaa
    np.array([[[0 for x in range(5)] for y in range(5)] for z in range(5)])
