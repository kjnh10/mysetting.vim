snippet     cout
  cout << ${0:TARGET} << endl;

snippet     couts
  ${0}rep(i, sz(x)) cout << x[i] << (i!=sz(x)-1 ? " " : "\n");

snippet     ?
  (${1} ? ${2} : ${3})

snippet ina
  int a[n]; rep(i, n) {cin>>a[i];}

snippet     rep
  rep(i, ${0}){
  }

snippet     rrep
  rrep(i, ${0}){
  }

snippet     for
  for(int i=0; i<n; i++){${0}
  }

snippet     if
  if (${0}) {
  }

snippet     else
  else{${0}
  }

snippet     elif
  else if(${0}){
  }

snippet     while
  while (${0}){
  }

snippet     reprep
  rep(i, ${1}) rep(j, ${2}){${0}
  }

snippet     d
  dump(${0});

snippet     af
  assert(false);

snippet     sortkey
  sort(all(${0}), [](auto &left, auto &right){return left.second < right.second;});

snippet     perm
  do{
    ${0};
  } while (next_permutation(all(x)));

snippet     warsharll
  // init
  int d[N][N]={};  // 必要があればglobalに
  rep(i, N)rep(j, N){
    d[i][j] = (i==j ? 0 : INF)
  }

  // input
  ${0};

  // calc
  rep(k, N){
    rep(i, N){
      rep(j, N){
        chmin(d[i][j], d[i][k]+d[k][j]);
      }
    }
  }
  dump_2d(d, N, N);

snippet digitdp
  rep(i, sz(S)){  //桁数
    rep(leq, 2){  //未満確定フラグ
      int lim = leq ? 9 : S[i]-'0';
      rep(d, lim+1){
        dp[i][leq || d<lim] += dp[i-1][leq];
      }
    }
  }

snippet rangesum
  int rangesum(int l, int r){
    // a[]: accumulative sum
    l = max(0, l);
    // r = min(0, n-1);
    if (l > r) return 0;
    return a[r] - (l-1>=0 ? a[l-1] : 0);
  }

snippet RangeSumVector
  struct RangeSumVector {  // {{{
    vector<int> data;
    vector<int> a_sum; //accumulative sum
    RangeSumVector(){}

    int &operator[](int i){
      return data[i];
    }
    void push_back(int v){
      data.push_back(v);
    }

    void calc(){
      a_sum = vector<int>(sz(data));
      a_sum[0] = data[0];
      for(int i=1; i<sz(data); i++){
        a_sum[i] += a_sum[i-1] + data[i];
      }
    }

    int rsum(int l, int r) {  // return sum of [l, r] of data.
      l = std::max(0LL, l);
      r = std::min(r, sz(a_sum)-1);
      if (l > r) return 0;
      return a_sum[r] - (l-1>=0 ? a_sum[l-1] : 0);
    }
  };
  // }}}}
